\documentclass{beamer}
\usepackage[latin1]{inputenc}
\usetheme{Warsaw}
\title[DISCOVER 2016]{SPIN \\Model Checking Distributed Software Systems}
\author{M. Devi Prasad}
\institute{School of Information Sciences\\Manipal University, Manipal\vspace*{2mm}\\
           \textcolor{blue}{devi.prasad@manipal.edu}}
\date{August 14, 2016}
\usepackage{mathpazo}

\newcommand\tab[1][4mm]{\hspace*{#1}}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{wasysym}

%%\setbeamercolor{math text}{fg=black}

\begin{document}

\begin{frame}
\titlepage
\end{frame}

\section*{Outline}
    \frame{\tableofcontents}

\section{Motivation}
  \subsection{Goals}
    \begin{frame}{Goals}
      \begin{itemize}
        \item Motivate the audience to formal verification of software
        \item Introduce model checking as a formal method
        \item Demonstrate ideas with SPIN
      \end{itemize}
    \end{frame}

  \subsection{Background}
    \begin{frame}{Three Catastrophes}
      \begin{itemize}
        \item Loss of lives due to Toyota unintended acceleration defect \textcolor{red} {(2002 - 2014)}
        \vspace*{1.5mm}\\
        \item Ethical bankruptcy in Volkswagen emission fraud {\textcolor{red}{(2015)}}
        \vspace*{1.5mm}\\
        \item Linux kernel vulnerability - keyring bug {\textcolor{red}{(2016)}}
      \end{itemize}
    \end{frame}
    
    \begin{frame}{Toyota Unintended Acceleration}
    A horrifying story of corrupt leadership and pathetic engineering.
    \end{frame}
    \begin{frame}{Volkswagen Emission Fraud}
    Dishonest and fraudulent practices of automotive industries.
    \end{frame}
    \begin{frame}{Linux Kernel Keyring Bug}
    An embarrassing bug that confirms Dijkstra's insightful observations.
    \end{frame}

\section{Introduction}
  \subsection{Informal Methods}
    \begin{frame}{Informal Methods - Testing}
    \begin{columns}
      \column{0.5\textwidth}
        \begin{figure}[ht]
          \begin{center}
            \includegraphics[height=2.45in]{../../../pictures/EdsgerDijkstra.jpg}
          \end{center}
        \end{figure}
      \column{0.5\textwidth}
      {\Large{Program Synthesis.\\Guarded Commands.\vspace*{1.5mm}\\Nondeterminacy.}}\vspace*{5mm}\\
      "The first moral of the story is that program testing can be used 
      very effectively to show the presence of bugs but never to show their absence."
    \end{columns}
    \end{frame}
  
  \subsection{Formal Methods}
    \begin{frame}{Formal Methods}
      Mathematics and logic
    \end{frame}
    
    \begin{frame}{Reactive Systems}
      \begin{itemize}
        \item<1->A reactive program's role is to maintains an ongoing interaction with its environment rather than to compute a final value and terminate.
        \item<2-> Concurrency is a fundamental element in reactive programs.
        \item<3> By definition, a reactive program runs concurrently with its environment.
      \end{itemize}
    \end{frame}
    
    \begin{frame}{Examples of Reactive Systems}
      \begin{itemize}
        \item Web servers and Web browsers
        \item Embedded systems software
        \item Operating systems
        \item Control programs
      \end{itemize}
    \end{frame}

    \begin{frame}{Properties of Reactive Programs}
      \begin{itemize}
        \item<1-> Safety properties\vspace*{1mm}\\
                \textcolor{blue}{"nothing bad ever happens"}
        \item[]
        \item<2-> Liveness properties\vspace*{1mm}\\
               \textcolor{blue}{"something good will eventually happen"}
      \end{itemize}
    \end{frame}

    \begin{frame}{Properties of Reactive Programs}
      \begin{itemize}
        \item<1-> Safety properties\vspace*{1mm}\\
                \textcolor{gray}{"nothing bad ever happens"}
                \vspace*{1mm}\\
                \textcolor{blue}{no deadlocks, no abnormal termination}\\
        \item[]
        \item<2-> Liveness properties\vspace*{1mm}\\
               \textcolor{gray}{"something good will eventually happen"}
               \vspace*{1mm}\\
               \textcolor{blue}{progress, fairness}
      \end{itemize}
    \end{frame}

    \begin{frame}{Properties of Reactive Programs}
      \begin{itemize}
        \item Safety properties\vspace*{1mm}\\
                \textcolor{gray}{"nothing bad ever happens"}
        \item[]
        \item Liveness properties\vspace*{1mm}\\
               \textcolor{gray}{"something good will eventually happen"}
               \vspace*{3mm}\\
      \end{itemize}
    These properties are defined only over infinite execution sequences
    of reactive programs.
    \end{frame}

  \subsection{Model Checking}
    \begin{frame}{Model Checking}
       Check that the model satisfies the properties.
    \end{frame}
    \begin{frame}{Amir Pnueli}
      \begin{columns}
        \column{0.5\textwidth}
          \begin{figure}[ht]
            \begin{center}
              \includegraphics[height=2.45in]{../../../pictures/AmirPnueli.jpg}
             \end{center}
          \end{figure}
        \column{0.5\textwidth}
            "In mathematics, logic is static \ldots When one designs a dynamic computer 
            system that has to react to ever changing conditions, \ldots one cannot design 
            the system based on a static view. It is necessary to characterize and describe 
            dynamic behaviors that connect entities, events, and reactions at different time 
            points. Temporal Logic deals therefore with a dynamic view of the world that 
            evolves over time."
      \end{columns}
    \end{frame}
    \begin{frame}{Leslie Lamport}
      \begin{columns}
        \column{0.5\textwidth}
          \begin{figure}[ht]
            \begin{center}
              \includegraphics[height=2.45in]{../../../pictures/LeslieLamport.jpg}
             \end{center}
          \end{figure}
        \column{0.5\textwidth}
            What Good Is Temporal Logic?
      \end{columns}
    \end{frame}
    \begin{frame}{Edmund Clarke}
      \begin{columns}
        \column{0.5\textwidth}
          \begin{figure}[ht]
            \begin{center}
              \includegraphics[height=2.45in]{../../../pictures/EdmundClarke.jpg}
             \end{center}
          \end{figure}
        \column{0.5\textwidth}
            Model Checking
      \end{columns}
    \end{frame}
    \begin{frame}{{\hspace{0.1\textwidth}}Joseph Sifakis {\hspace{0.25\textwidth}} Allen Emerson}
      \begin{columns}
        \column{0.5\textwidth}
          \begin{figure}[ht]
            \begin{center}
              \includegraphics[height=2.45in]{../../../pictures/JosephSifakis.jpg}
             \end{center}
          \end{figure}
        \column{0.5\textwidth}
        \begin{figure}[ht]
          \begin{center}
            \includegraphics[height=2.45in]{../../../pictures/AllenEmerson-Color.jpg}
           \end{center}
        \end{figure}
      \end{columns}  
  \end{frame}

  \subsection{Foundations}
    \begin{frame}{Automata and Logic}
      A finite state automaton is a quintuple $\mathrm{(S, s_0, L, T, F)}$, where\vspace*{2mm}\\
        \tab $\mathrm{S}$ \tab[3mm] is a finite set of \emph{states}\vspace*{1.2mm}\\
        \tab $\mathrm{s_0}$ \tab[2mm] is the \emph{initial state}, $s_0 \in S$\vspace*{1.2mm}\\
        \tab $\mathrm{L}$ \tab[3mm] is a finite set of \emph{labels}\vspace*{1.2mm}\\
        \tab $\mathrm{T}$ \tab[3mm] is a set of \emph{transitions}, 
                    $\mathrm{T \subseteq (S \times L \times S)}$, and\vspace*{1.2mm}\\
        \tab $\mathrm{F}$ \tab[3mm] is a set of \emph{final} states, $\mathrm{F \subseteq S}$\vspace*{1.2mm}\\
    \end{frame}

    \begin{frame}{Omega Run}
      \begin{itemize}
        \item A finite state machine models terminating executions
        \item A finite state machine cannot decide on acceptance or
               non-acceptance of ongoing, potentially infinite executions.\vspace*{2mm}\\
        \item<2-> An infinite run is called an $\omega$-run or \emph{omega run}
      \end{itemize}
    \end{frame}
    \begin{frame}{Omega Acceptance}
      \begin{itemize}
        \item if $\sigma$ is an infinite run, $\sigma^{\omega}$ represents the set of
              states that appear infinitely often within $\sigma$'s transitions\vspace*{2mm}\\
        \item<2-> $\sigma^{+}$ represents the set of states that appear only finitely
                  many times.
      \end{itemize}
    \end{frame}
    \begin{frame}{Omega Acceptance}
      \begin{itemize}
        \item An accepting $\omega$-run of finite state automaton $\mathrm{(S, s_0, L, T, F)}$
              is any infinite run $\sigma$ such that ${\exists \mathrm{s_{f}.\,s_{f} \in F \wedge s_f} \in \sigma^\omega}$\vspace*{2mm}\\
      \end{itemize}
      An infinite run is accepted if and only if some state in F is visited infinitely often in the run.
    \end{frame}
    \begin{frame}{}
    \end{frame}

\section{Verified Software Intiative}
  \subsection{The Manifesto}
    \begin{frame}{Verified Software Initiative Manifesto}
    \end{frame}
    \begin{frame}{Sir C. A. Richard Hoare}
      \begin{columns}
        \column{0.5\textwidth}
          \begin{figure}[ht]
            \begin{center}
              \includegraphics[height=2in]{../../../pictures/SirTonyHoare.jpg}
             \end{center}
          \end{figure}
        \column{0.5\textwidth}
          "The teams of experimental scientists will require education in the relevant 
          theories, and training in the use of the best available tools. Would you be 
          prepared to design and deliver Master's courses on program verification?
          Would it be appropriate to set Master's projects to verify small portions 
          of the challenge material held in the repository?"
        \end{columns}
    \end{frame}
    \begin{frame}{Sir C. A. Richard Hoare}
      \begin{columns}
        \column{0.5\textwidth}
          \begin{figure}[ht]
            \begin{center}
              \includegraphics[height=2in]{../../../pictures/SirTonyHoare.jpg}
             \end{center}
          \end{figure}
        \column{0.5\textwidth}
          "Education in technology should begin at the undergraduate level. Would you be
           prepared to teach the use of specifications and assertions as a routine aid to 
           program testing, as they are currently being used in Industry? Would you use them 
           yourself as an aid to marking the students' practical assignments?"
        \end{columns}
    \end{frame}

\section{Conclusion}
  \subsection{Key Takeaway}
    \begin{frame}{Important Takeaway}
    \end{frame}
  \subsection{Q and A}
    \begin{frame}{Questions?}
    \end{frame}
\end{document}
