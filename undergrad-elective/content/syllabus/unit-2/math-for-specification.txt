Mathematics for Specification
------------------------------
Programs operate on different types of data - integers, floating point numbers,
characters, and boolean data types. These data values can be viewed as being 
drawn from respective sets - objects which are well-known to mathematicians 
for centuries. Sets also provide the basis for a theory of functions and 
relations. These constructions, in turn, allow us to define richer collections 
such as sequences and bags. These objects give us power to specify a great 
deal about programs.


Sets
-----
The entities that make up a set are called its members or elements. To state 
that an element x is a member of set A, we write
    x in A
To state that x does not belong to A, we write
    x not in A

A set is a collection of distinct objects. 

Two sets are equal or identical if they have exactly the same members. We write
    A = B
to mean that sets A and B are equal.

Since sets are also objects, it is easy to conceive of sets that are members 
of other sets. Here is an example:
    A = { {1, 3, 5}, {7, 11, 13}, {17, 19, 23} }

It must be noted that 
    {{1, 3, 5}} not = {1, 3, 5}

However, we should note that
    {1, 3, 5} in { {1, 3, 5}}
and
    x in {x} for any x.


Subsets
--------
Set A is said to be a subset of B if every element in A is also a member of B. B is 
said to be a superset of A.
    A subset B == forall x. (x in A => x in B)

Note that A subset A. Thus, we have a notion of "proper subset" where for two 
sets A and B,
    (A subset of B) and (A not = B)


Extensional and Comprehensive specification of sets
----------------------------------------------------
In a few cases, we can enumerate individual members of a set. This technique 
of specification is called the extensional method. In most cases, though, it 
is not possible to exhaustively enumerate all members. In other cases, we may 
want to specify an expression describing the characteristic properties of the 
members of the set.


Axiom of Specification or Principles of Comprehensive Specification
---------------------------------------------------------------------
For every set A and every well-formed formula P(x), there is another set B 
whose elements are those elements x in A for which the property P(x) holds.
    B = { x in A | P(x) }

The set of all positive even numbers may be specified as follows:
    { x in N | x mod 2 = 0}

The set of two digit positive numbers less than hundred and divisible by 5:
    { x in N | 9 gt x lt 100 and x mod 5 = 0 }


Empty Set
---------
Empty set, as the name implies, has no elements. An empty set may written as 
{} or as 'null'.

Empty set is a subset of very set. This can be proved by contradiction. Assume 
that empty set is not a member of some set A. This implies that empty set must 
contain an element that is not in A. But this is not so because an empty set 
obviously has no members. Thus, our assumption that empty set is not a member 
of every set must be wrong. Hence, empty set is member of every set.

Power Set
----------
The set of all subsets of a set defines the powerset of that set.
if A = {1, 2} then the set of all its subsets is:
    { {1}, {2}, {1, 2}, {} }

Set Operations
---------------
A union B = { x | x in A or x in B}
A intersect B = { x | x in A and x in B }

Set difference or Relative complement of the set B in set A
A - B = { x in A | x not in B}

Symmetric difference - element is either only on A or only in B, but not in both).
A + B = (A - B) union (B - A) 

Pairs
------
Pairing is an important idea: it can be used to represent mappings described 
by functions. An unordered pair may be extensionally specified as {a, b}. We 
can also give a comprehensive specification as: {x in C | x = a or x = b}. 
Thus, the set C contains only a and b, and nothing else.

In many cases, we will require a pair of elements to be ordered. Set {a, b} by
itself does not capture the notion of ordering. Despite this limitation of 
sets to abstract away ordering of elements, we would still like to see if sets 
can be used to represent ordering in some very abstract sense. 

Given an unordered pair {a, b} we may state that an ordered pair (a, b) 
represents a set containing two subsets: { {a}, {a, b} }. We should have a 
constructive rule to capture this idea of ordering. Here is the ordering rule:
    For each position i in the order, create a subset such that it includes 
    only the element that occurs in position i in the order, together with 
    all the elements that occur before the current element in the order.

 Let us try to understand this not-so-intuitive definition with an example. 
 Consider a set A = { Fortran, Lisp, Cobol, Algol, ML }. If we order these 
 elements with the rule described above, we will have
    Ordered = {{Fortran},
               {Fortran, Lisp},
               {Fortran, Lisp, Cobol}, 
               {Fortran, Lisp, Cobol, Algol},
               {Fortran, Lisp, Cobol, Algol, ML} }

In other words, this gives a mathematical description of the notion of 
"ordering" the elements of a set. This is a constructive method of 
identifying "positions" with subsets of the elements of the given set. 

It is worth noting that (Fortran, Lisp) not = {Fortran, Lisp}. The former is 
an ordered pair while the latter is a set in which ordering is unimportant. 

We must note that (Fortran, Lisp) not = (Lisp, Fortran). The reason is simple. 
If we create the sets that represent these two ordered pairs, we will obtain
     Order1 = { {Fortran}, {Fortran, Lisp} }
     Order2 = { {Lisp} ,   {Fortran, Lisp} }
which essentially proves the point.

It is simple to note that the notion of ordering can be extended to n-tuples.


Predicates and Sets of States
-----------------------------
The state of a program is characterized by the values of variables used in the 
program. The state of a program can therefore be viewed as a function which 
maps identifiers to their values. 

Predicates can effectively express relationships that hold among variables 
used in a program. Thus, we may express certain properties that hold in 
specific program states. Here is a predicate
    Bounds(i, j, n) = 0 <= i < j+1 < n
which states that in a particular state, variables i, j and n have values with
specific properties. Predicates such as these are very commonly used in 
specifying loop invariants, and postconditions.

Usually we will identify a predicate with the set of states. Instead of saying 
that a predicate P characterizes a set of states, we will refer to the states 
in predicate P or states P, per se.

We can compare the strengths of predicates based on the sizes of sets they 
describe. A predicate that describes a larger state space is said to be weaker
than a predicate that describes relatively smaller state space. If P and Q are
two predicates on the same state space, and P is stronger than Q then P will
describe only a subset of the states described by Q.

This is stated formally in the following:
predicate P(x1, ..., xn) is stronger (or more restrictive) than Q(x1, ..., xn)
on the state space (x1, ..., xn) if
    {(x1, ..., xn) | P(x1, ..., xn)} subset {(x1, ..., xn) | Q(x1, ..., xn)}

When P is stronger than Q or has the same strength as Q, then P => Q.

F (false) is the strongest predicate of all because it admits no states - 
the state space is completely empty. T (true) is the weakest predicate because
it trivially admits every state. 

If P and Q are two predicates, then
    P and Q is stronger than or same strength as P.
    P and Q is stronger than or same strength as Q.
    P or Q is weaker than or same strength as P.
    P or Q is weaker than or same strength as Q.

Examples:
    x > 0 is stronger than x >= 0
    forall j. 1 <= j < N: a(j) < a(j+1) is stronger than
        forall j. 1 <= j < N: a(j) <= a(j+1)



Functions
----------
If A and B are sets, then function f maps an element of A to an element of B.
The notation f: A -> B is interpreted as a function from A to B. 

In general, a function f: A -> B defines a subset of A x B, the Cartesian 
product of the elements of A and B. A is the parent domain of f, and B is the 
co-domain of f.

It is possible that some f is not defined for all values in its parent domain. 
Also, there may be values in its co-domain B which are not mapped by any value 
in the parent domain. 

if f is a function f: A -> B, and if y = f(x), then 
    y is referred to as the image of x under f.
    x is called the pre-image of y under f.

The subset of A for which f is defined is referred to as the domain of f. This
is referred to as 'dom f'. We write 
    dom f subset A.
and more formally,
    dom f = { x in A | exists y in B. y = f(x) }

The subset of B for which f is defined is referred to as the 'range of f'. 
We write 
    range f subset Y.
and more formally,
    range f = {y in B | exists x in A. y = f(x) }

Note that range is a subset of B while y is an image of x under f.

Partial functions
------------------
It is possible to have functions that are not defined over all elements in the 
parent domain. Such functions are called partial functions. We write 
    f: A |-> B 
to mean f is a partial function from A to B. Note that in the case of partial
functions
    dom(f) subset A.

If dom(f) = A then f is a total function.


Classification of functions
----------------------------
Injective or one-to-one functions
    every element in its domain has a distinct image
    if f(x1) = f(x2) => (x1 = x2)

Surjective or onto functions
    every element y in the range f is an image of some x in A.

Bijective or one-to-one correspondence functions
    A function f: A -> B is bijctive if it is injective and surjective.
    All elements in the domain have distinct images and every y in B is the
       image of some x in A.


Identity function
------------------
An identity function f: A -> A defined by f(x) = x associates each element 
in X with itself. It is denoted id(X).
   id(X) = { (x, x) | x in X }
Identity function is a bijection.


Constant function
------------------
A function f: A -> B is a constant function if 
    {(x, c) | forall x in A } for a fixed c in B.


Characteristic function
------------------------
A characteristic function of A subset X where X is non-empty tells if an 
element x is in A or not.
    { (x, y) in (X x {0, 1}) | (x in A => (y = 1)) and (x not in A => (y = 0)) } 

Characteristic function CF: X -> {0, 1}        
    CF(x) = 1 if x in A
    CF(x) = 0 if x not in A.


Sequences and Bags 
-------------------


Mathematical induction
-----------------------
